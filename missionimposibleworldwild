/* -*- Mode:C++; c-file-style:"gnu"; indent-tabs-mode:nil; -*- */
/*
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License version 2 as
 * published by the Free Software Foundation;
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 */

#include "ns3/core-module.h"
#include "ns3/network-module.h"
#include "ns3/csma-module.h"
#include "ns3/internet-module.h"
#include "ns3/point-to-point-module.h"
#include "ns3/applications-module.h"
#include "ns3/ipv4-global-routing-helper.h"//Routing table genarate
#include "ns3/netanim-module.h"//anim.xml genarate

// Default Network Topology
//
//       10.1.1.0
// n0 -------------- n1   n2   n3   n4
//    point-to-point  |    |    |    |
//                    ================
//                      LAN 10.1.2.0


using namespace ns3;

NS_LOG_COMPONENT_DEFINE ("SecondScriptExample");

int 
main (int argc, char *argv[])
{
  bool verbose = true;
  uint32_t nCsma = 3; // ncsma device 
  bool tracing = true; // pcap file genarate

  CommandLine cmd (__FILE__);
  cmd.AddValue ("nCsma", "Number of \"extra\" CSMA nodes/devices", nCsma);
  cmd.AddValue ("verbose", "Tell echo applications to log if true", verbose);
  cmd.AddValue ("tracing", "Enable pcap tracing", tracing);

  cmd.Parse (argc,argv);

  if (verbose)
    {
      LogComponentEnable ("UdpEchoClientApplication", LOG_LEVEL_INFO);
      LogComponentEnable ("UdpEchoServerApplication", LOG_LEVEL_INFO);
    }

  nCsma = nCsma == 0 ? 1 : nCsma;

  NodeContainer hosts;
  hosts.Create (1); // workstation 01

  NodeContainer routers;
  routers.Create (4); // count of router

  NodeContainer bus;
  bus.Create (nCsma); 

  InternetStackHelper stack;
  stack.Install (hosts);
  stack.Install (routers); // install host router bus
  stack.Install (bus);

  PointToPointHelper p2p;
  p2p.SetDeviceAttribute ("DataRate", StringValue ("10Mbps"));
  p2p.SetChannelAttribute ("Delay", StringValue ("3ms"));//Set the Data Rate of the point-to-point link to 10Mbps and the Delay to 3ms

// Set the data rate to 275Mbps and the delay to 500 nanoseconds for the Csma 
// connection. (Name your code as ICT.cc)

  CsmaHelper csma;
  csma.SetChannelAttribute ("DataRate", StringValue ("275Mbps"));
  csma.SetChannelAttribute ("Delay", TimeValue (NanoSeconds (500)));
  
  Ipv4AddressHelper address; // all subnets configure ip addaress


  NodeContainer subnet1;
  subnet1.Add(hosts.Get(0));
  subnet1.Add(routers.Get(0));
  NetDeviceContainer sub1Device = p2p.Install(subnet1);
  address.SetBase ("10.1.1.0", "255.255.255.0");
  Ipv4InterfaceContainer sub1Interface = address.Assign (sub1Device);


  NodeContainer subnet2;
  subnet2.Add(routers.Get(0));
  subnet2.Add(routers.Get(1));
  NetDeviceContainer sub2Device = p2p.Install(subnet2);
  address.SetBase ("10.1.2.0", "255.255.255.0");
  Ipv4InterfaceContainer sub2Interface = address.Assign (sub2Device);

  NodeContainer subnet3;
  subnet3.Add(routers.Get(1));
  subnet3.Add(routers.Get(2));
  NetDeviceContainer sub3Device = p2p.Install(subnet3);
  address.SetBase ("10.1.3.0", "255.255.255.0");
  Ipv4InterfaceContainer sub3Interface = address.Assign (sub3Device);

  NodeContainer subnet4;
  subnet4.Add(routers.Get(1));
  subnet4.Add(routers.Get(3)); 
  NetDeviceContainer sub4Device = p2p.Install(subnet4);
  address.SetBase ("10.1.4.0", "255.255.255.0");
  Ipv4InterfaceContainer sub4Interface = address.Assign (sub4Device);


  NodeContainer subnet5;
  subnet5.Add(routers.Get(2));
  subnet5.Add(bus);
  NetDeviceContainer sub5Device = csma.Install (subnet5);
  address.SetBase ("10.1.5.0", "255.255.255.0");
  Ipv4InterfaceContainer csmaInterfaces = address.Assign (sub5Device);

  UdpEchoServerHelper echoServer (9); // server set

  ApplicationContainer serverApps = echoServer.Install (bus.Get (0)); //csma(bus) node 3i, ganan karanne 0,1,2 // o=server
  serverApps.Start (Seconds (1.0));
  serverApps.Stop (Seconds (10.0));
// set client
// Display your output how the data packets send one node to another node 
//set Maximum packet size =2048, Interval time value=1 seconds, Maximum 
//packets=1. (add your output screenshot name as your index number)

  UdpEchoClientHelper echoClient (csmaInterfaces.GetAddress ((1)), 9); //address gannakota patn ganne router ekath akka gann karanne (0,1,2,3) 
  echoClient.SetAttribute ("MaxPackets", UintegerValue (1));		   // 0 = router   // 1,2,3 = bus //So, 1=server
  echoClient.SetAttribute ("Interval", TimeValue (Seconds (1.0)));
  echoClient.SetAttribute ("PacketSize", UintegerValue (2048));

  ApplicationContainer clientApps1 = echoClient.Install (subnet1.Get (0)); //1st workstation
  clientApps1.Start (Seconds (2.0));
  clientApps1.Stop (Seconds (10.0));

  //ApplicationContainer clientApps2 = echoClient.Install (bus.Get (1)); //bus node 3i, gann karanne 0,1,2, So 1= workstation
  //clientApps2.Start (Seconds (2.0));
  //clientApps2.Stop (Seconds (10.0));

  Ipv4GlobalRoutingHelper::PopulateRoutingTables ();
//Generate the animation file (ICTAnim.xml) on NetAnim animator
  AnimationInterface anim("bus.xml");
  anim.SetConstantPosition(subnet1.Get(0),10.0,10.0);
  anim.SetConstantPosition(subnet1.Get(1),20.0,20.0);

  anim.SetConstantPosition(subnet2.Get(0),30.0,30.0);
  anim.SetConstantPosition(subnet2.Get(1),40.0,40.0);

  anim.SetConstantPosition(subnet3.Get(0),50.0,50.0);
  anim.SetConstantPosition(subnet3.Get(1),60.0,60.0);

  anim.SetConstantPosition(subnet4.Get(0),70.0,70.0);
  anim.SetConstantPosition(subnet4.Get(1),80.0,80.0);

  anim.SetConstantPosition(subnet5.Get(0),90.0,90.0); //router 3
  anim.SetConstantPosition(subnet5.Get(1),100.0,100.0); //bus 1 = server
  anim.SetConstantPosition(subnet5.Get(2),110.0,110.0); //bus 2 = workstation 2 
  anim.SetConstantPosition(subnet5.Get(3),120.0,120.0); //bus 3 = printer

// Generate Ascii Trace files for both PointToPoint nodes and csma nodes then you have 
// to give thruputs and goodput of your subnet1 nodes (make a screenshot of your output )
// • PointToPoint trace file name – Point2Point.tr
// • csma trace file name - Csma.tr
  
  AsciiTraceHelper ascii;
  p2p.EnableAsciiAll (ascii.CreateFileStream ("Point2Point.tr"));
  csma.EnableAsciiAll (ascii.CreateFileStream ("Csma.tr"));

// Generate the packet capture(.pcap) file for subnet 3 node 2 (N4). (save the export file 
// name as subnet2.pcap) 
  if (tracing == true)
    {
  		p2p.EnablePcap ("subnet2", sub3Device.Get (1)); // pcap file genarate
	}

  

  Simulator::Run ();
  Simulator::Destroy ();
  return 0;
}

/*csma / p2p 2nd.cc
p2p 1st.cc
Accses point 3rd.cc

run sexond3 fill and compile
    strach folder eliye idn run krnn oni
    ./waf -- run scratch/second.cc
    ns33 / netanim / open terminal
    ./NetAnim
    open locaton bus.xml
after genarate fille how to open pacp file 
    go ti ns 33
    open terminal
      wireshark
        open fille location 

Q3
7nth cc fill copy strach folder
open file 
rull no 269 change name accoding to name like details.cwnd
open terminal ns 333
  ./waf --run scratch/seventh.cc
details.cwnd fill copy 
 ict051 fill
 create gnuplot file new
 past cwnd 
 open file and space remove 
    setings   
      find and repalse
      find \t
      replace with only one space
      click replace all
      create dile plt with name 
        set terminal pdf
        set output "output1.pdf"
        set title "congestion window"
        set xlabel "Time"
        set ylabel "congestion Window"
        plot "details.cwnd" using 1:3 with linespoints title "old value","details.cwnd" using 1:2 with impulse title "New value"
      save
      run gnuplot Example.plt
q4
crete deatails.data and iput table 
crete deatails .plt 
    set terminal pdf
    set output "output2.pdf"
    set title "router data"
    set style data histogram
    set style fill solid
    set style histogram clustered
    set xlabel "router"
    plot for [COL=2:3] "details.data" using COL:xtic(1) title "signal range"
    plot for [COL=2:3] "details.data" using COL:xtic(1) title "speed mbps"
  run gnuplot deatails.plt


...................................
/* -*- Mode:C++; c-file-style:"gnu"; indent-tabs-mode:nil; -*- */
/*
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License version 2 as
 * published by the Free Software Foundation;
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 */

#include "ns3/core-module.h"
#include "ns3/network-module.h"
#include "ns3/csma-module.h"
#include "ns3/internet-module.h"
#include "ns3/point-to-point-module.h"
#include "ns3/applications-module.h"
#include "ns3/ipv4-global-routing-helper.h"

#include "ns3/netanim-module.h"


// Default Network Topology
//
//       10.1.1.0
// n0 -------------- n1   n2   n3   n4
//    point-to-point  |    |    |    |
//                    ================
//                      LAN 10.1.2.0


using namespace ns3;

NS_LOG_COMPONENT_DEFINE ("SecondScriptExample");

int 
main (int argc, char *argv[])
{
  bool verbose = true;
  uint32_t nCsma = 3;
  bool tracing = true;

  CommandLine cmd;
  cmd.AddValue ("nCsma", "Number of \"extra\" CSMA nodes/devices", nCsma);
  cmd.AddValue ("verbose", "Tell echo applications to log if true", verbose);
  cmd.AddValue ("tracing", "Enable pcap tracing", tracing);


  cmd.Parse (argc,argv);

  if (verbose)
    {
      LogComponentEnable ("UdpEchoClientApplication", LOG_LEVEL_INFO);
      LogComponentEnable ("UdpEchoServerApplication", LOG_LEVEL_INFO);
    }

  nCsma = nCsma == 0 ? 1 : nCsma;

  NodeContainer p2pNodes1;
  p2pNodes1.Create (2);
-----
  NodeContainer p2pNodes2;
  p2pNodes2.Add (p2pNodes1.Get (0));
  p2pNodes2.Create (1);

  NodeContainer csmaNodes;
  csmaNodes.Add (p2pNodes2.Get (1));
  csmaNodes.Create (3);

  PointToPointHelper pointToPoint;
  pointToPoint.SetDeviceAttribute ("DataRate", StringValue ("10Mbps"));
  pointToPoint.SetChannelAttribute ("Delay", StringValue ("3ms"));

  NetDeviceContainer p2pDevices1;
  p2pDevices1 = pointToPoint.Install (p2pNodes1);

  NetDeviceContainer p2pDevices2;
  p2pDevices2 = pointToPoint.Install (p2pNodes2);

  CsmaHelper csma;
  csma.SetChannelAttribute ("DataRate", StringValue ("275Mbps"));
  csma.SetChannelAttribute ("Delay", TimeValue (NanoSeconds (500)));

  NetDeviceContainer csmaDevices;
  csmaDevices = csma.Install (csmaNodes);

  InternetStackHelper stack;
  stack.Install (p2pNodes1);
  stack.Install (csmaNodes);

  Ipv4AddressHelper address;
  address.SetBase ("10.1.1.0", "255.255.255.0");
  Ipv4InterfaceContainer p2p1Interfaces = address.Assign (p2pDevices1);

  address.SetBase ("10.1.2.0", "255.255.255.0");
  Ipv4InterfaceContainer p2p2Interfaces = address.Assign (p2pDevices2);

  address.SetBase ("10.1.3.0", "255.255.255.0");
  Ipv4InterfaceContainer csmaInterfaces = address.Assign (csmaDevices);

  UdpEchoServerHelper echoServer (9);

  ApplicationContainer serverApps = echoServer.Install (csmaNodes.Get (1));
  serverApps.Start (Seconds (1.0));
  serverApps.Stop (Seconds (10.0));

  UdpEchoClientHelper echoClient (csmaInterfaces.GetAddress (1), 9);
  echoClient.SetAttribute ("MaxPackets", UintegerValue (1));
  echoClient.SetAttribute ("Interval", TimeValue (Seconds (1.0)));
  echoClient.SetAttribute ("PacketSize", UintegerValue (2048));

  ApplicationContainer clientApps = echoClient.Install (p2pNodes1.Get (0));
  clientApps.Start (Seconds (2.0));
  clientApps.Stop (Seconds (10.0));

  Ipv4GlobalRoutingHelper::PopulateRoutingTables ();

  AnimationInterface anim ("second.xml");
  anim.SetConstantPosition(p2pNodes1.Get (0), 10.0, 10.0);
  anim.SetConstantPosition(p2pNodes1.Get (1), 20.0, 20.0);

  anim.SetConstantPosition(p2pNodes2.Get (0), 20.0, 20.0);
  anim.SetConstantPosition(p2pNodes2.Get (1), 30.0, 30.0);

  anim.SetConstantPosition(csmaNodes.Get (0), 30.0, 30.0);
  anim.SetConstantPosition(csmaNodes.Get (1), 40.0, 40.0);
  anim.SetConstantPosition(csmaNodes.Get (2), 50.0, 50.0);
  anim.SetConstantPosition(csmaNodes.Get (3), 60.0, 60.0);

  AsciiTraceHelper ascii;
  pointToPoint.EnableAsciiAll (ascii.CreateFileStream ("abcd.tr"));
  csma.EnablePcapAll ("efgh.tr");


  pointToPoint.EnablePcapAll ("second");
  csma.EnablePcap ("second", csmaDevices.Get (1), true);

  Simulator::Run ();
  Simulator::Destroy ();
  return 0;
}
-------
q1
set terminal pdf
set output "wirelessQ1058.pdf"
set title "Router Data"
set xlabel "Router no"
set ylabel "Router info"
plot "ICTQ1058.txt" using 1:2 with lines title "speed mb/s"
replot "ICTQ1058.txt" using 1:3 with lines title "signal range"
q2
set terminal png
set output 'ICTQ2058.png'
set style data histogram
set style histogram clustered
set style fill solid
plot for [COL=2:3] 'ICTQ2058.txt' using COL:xtic(1) title 'AQI'
-----------
seventh.cc(cwnd)
set terminal pdf
set output "exam.pdf"
set title "congenstion window"
set xlabel "old"
set ylabel "new"
plot "seventh.cwnd" using 1:2 with linespoints title "old", "seventh.cwnd" using 1:3 with impulse title "new"
---------
ca2 - 1st.cc
 //1 st server app
  echoServer.SetAttribute("Port", StringValue("5000"));
  ApplicationContainer serverApp1 = echoServer.Install (nodes.Get(1));//server node define
  serverApp1.Start (Seconds (1.0));
  serverApp1.Stop (Seconds (10.0));

  //2n server app
  echoServer.SetAttribute("Port", StringValue("5001"));
  ApplicationContainer serverApp2 = echoServer.Install (nodes.Get(1));//server node define
  serverApp2.Start (Seconds (2.0));
  serverApp2.Stop (Seconds (10.0));
-
  ApplicationContainer clientApps1 = echoClient.Install (nodes.Get(0));//client node define
  clientApps1.Start (Seconds (2.0));
  clientApps1.Stop (Seconds (10.0));

  //4th part
  ApplicationContainer clientApps2 = echoClient.Install (nodes.Get(0));//client node define
  clientApps2.Start (Seconds (2.0));
  clientApps2.Stop (Seconds (10.0));

AnimationInterface anim("first.xml");
anim.SetConstantPosition(nodes.Get(0),10.0,10.0);
anim.SetConstantPosition(nodes.Get(0),20.0,20.0);

pointToPoint.EnablePcapAll ("first");
---
seven.
set terminal pdf
set output "exam.pdf"
set title "congenstion window"
set xlabel "old"
set ylabel "new"
plot "seventh.cwnd" using 1:2 with linespoints title "old", "seventh.cwnd" using 1:3 with impulse title "new"



        



